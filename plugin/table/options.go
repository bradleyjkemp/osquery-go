package table

import "context"

type GenerateFuncImpl func(ctx context.Context, queryContext QueryContext) ([]RowDefinition, error)
type InsertFuncImpl func(ctx context.Context, row RowDefinition) (rowID int, err error)
type UpdateFuncImpl func(ctx context.Context, rowID int, row RowDefinition) error

// Generate returns the rows generated by the table. The ctx argument
// should be checked for cancellation if the generation performs a
// substantial amount of work. The queryContext argument provides the
// deserialized JSON query context from osquery.
func GenerateFunc(generate GenerateFuncImpl) Option {
	return func(plugin *Plugin) {
		plugin.generate = generate
	}
}

// Generate returns the rows generated by the table. The ctx argument
// should be checked for cancellation if the generation performs a
// substantial amount of work. The queryContext argument provides the
// deserialized JSON query context from osquery.
func InsertFunc(insert InsertFuncImpl) Option {
	return func(plugin *Plugin) {
		plugin.insert = insert
	}
}

// Generate returns the rows generated by the table. The ctx argument
// should be checked for cancellation if the generation performs a
// substantial amount of work. The queryContext argument provides the
// deserialized JSON query context from osquery.
func UpdateFunc(update UpdateFuncImpl) Option {
	return func(plugin *Plugin) {
		plugin.update = update
	}
}
